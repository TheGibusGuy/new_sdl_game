#ifndef MIKEY_RNG
#define MIKEY_RNG

#include <cstdint>

namespace mikey {

	constexpr std::uint8_t rngTable[256] = {
		110, 7, 164, 26, 238, 200, 236, 222, 212, 168, 158, 231, 115, 207, 61, 112, 43, 211, 121, 65, 112, 227, 157, 203, 87, 18, 183, 176, 98, 106, 71, 154, 167, 177, 141, 50, 47, 114, 190, 172, 248, 236, 198, 7, 210, 76, 248, 29, 254, 146, 211, 44, 229, 92, 199, 45, 8, 159, 203, 31, 71, 102, 39, 109, 5, 204, 11, 91, 173, 208, 6, 171, 68, 59, 128, 203, 241, 248, 132, 175, 150, 119, 163, 108, 27, 92, 249, 112, 174, 4, 184, 100, 139, 58, 21, 211, 124, 171, 96, 150, 159, 102, 204, 58, 236, 150, 22, 185, 108, 44, 49, 245, 245, 95, 41, 45, 23, 190, 254, 220, 250, 210, 189, 145, 110, 48, 250, 9, 174, 165, 199, 65, 234, 120, 68, 228, 43, 35, 109, 12, 71, 89, 75, 218, 252, 133, 193, 102, 185, 92, 6, 231, 136, 218, 92, 253, 141, 146, 32, 95, 193, 57, 134, 79, 74, 57, 192, 48, 82, 17, 141, 131, 83, 134, 104, 89, 194, 46, 89, 159, 181, 245, 146, 81, 93, 77, 218, 72, 215, 99, 217, 226, 205, 116, 108, 87, 146, 217, 165, 229, 161, 183, 165, 125, 222, 45, 75, 191, 9, 98, 95, 47, 234, 36, 234, 25, 71, 253, 33, 2, 105, 224, 43, 28, 72, 23, 53, 7, 220, 32, 224, 126, 21, 67, 30, 2, 185, 143, 199, 76, 200, 117, 251, 172, 225, 74, 231, 131, 103, 52, 46, 68, 166, 121, 168, 61
	};

	std::uint8_t rngIndex = 255;

	// 0 to 255
	constexpr std::int8_t randInt() {
		rngIndex += 1; // will automatically overflow back to 0
		return rngTable[rngIndex];
	}

	// 0% to 100%
	constexpr double randPercent() {
		rngIndex += 1; // will automatically overflow back to 0
		return (double)rngTable[rngIndex] / (double)255;
	}

	// -100% to 100%
	constexpr double randPercentWide() {
		rngIndex += 1; // will automatically overflow back to 0
		
		if (randInt() <= 127) {
			return -randPercent();
		} else {
			return randPercent();
		}
	}

}

#endif